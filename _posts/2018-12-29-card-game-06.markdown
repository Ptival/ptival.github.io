---
layout: post
title: "Creating a card game in Haskell (part 6)"
date: 2018-12-29 06:27:00 -0700
permalink: card-game-06
comments: true
categories:
---

This post is part of a series.
- [Initial post](https://ptival.github.io/card-game-01)
- [Previous post](https://ptival.github.io/card-game-05)

[Source code for this post](https://github.com/Ptival/yugioh/tree/bcb1472f5889ee052f2066062cb3cde947349570)

It's time to r-r-r-refactor!
----------------------------

Up to this point, we implemented the whole logic for each phase in the code that
runs the phase.  Not only did we have high-level concepts like attacking a
monster, we also had all the low-level implementation of such concepts, like
setting the flag `hasAttacked` to `True` when the monster attacks so that it
cannot attack again this turn.

We had some helper functions like `endTurn` factored out, so that they could be
called from different phases, but there was no clear separation between
high-level concepts and low-level concepts.  Let's change this design a bit.

I have now separated the operations that can run the game into its own
domain-specific language.  It essentially is a collection of all the verbs we
might need, alongside the type of their inputs and the type of their outputs.
This uses the freer monads implementation of extensible effects once again, and
looks like:

{% highlight haskell %}

data Operation a where
  AddCardToHand        :: PlayerLens ->         Card ->               Operation ()
  ChooseMove           ::     forall p.     [Move p] ->               Operation (Move p)
  DestroyMonster       :: PlayerLens -> MonsterSpace ->               Operation ()
  DirectAttack         :: PlayerLens -> MonsterSpace -> PlayerLens -> Operation (Maybe Victory)
  DrawCard             :: PlayerLens ->                               Operation (Maybe Victory)
  EndTurn              ::                                             Operation ()
  EnterBattlePhase     ::                                             Operation ()
  EnterEndPhase        ::                                             Operation ()
  EnterMainPhase       ::                                             Operation ()
  FlipMonster          :: PlayerLens -> MonsterSpace ->               Operation ()
  GetDeck              :: PlayerLens ->                               Operation Deck
  GetHand              :: PlayerLens ->                               Operation Hand
  GetHasDrawnCard      :: PlayerLens ->                               Operation Bool
  GetHasNormalSummoned :: PlayerLens ->                               Operation Bool
  GetMainMonsterZone   :: PlayerLens ->                               Operation MainMonsterZone
  GetPhase             ::                                             Operation Phase
  GetPlayer            :: PlayerLens ->                               Operation Player
  GetStartingHandSize  ::                                             Operation Int
  InflictDamage        :: PlayerLens -> Int          ->               Operation (Maybe Victory)
  Log                  :: Entry      ->                               Operation ()
  RemoveCardFromHand   :: PlayerLens ->         Card ->               Operation ()
  SendToGraveyard      :: PlayerLens ->         Card ->               Operation ()
  SetHasAttacked       :: PlayerLens -> MonsterSpace ->               Operation ()
  SetHasDrawnCard      :: PlayerLens ->         Bool ->               Operation ()
  SetHasNormalSummoned :: PlayerLens ->         Bool ->               Operation ()
  ShuffleDeck          :: PlayerLens ->                               Operation ()
  SummonMonster        :: PlayerLens ->         Card ->   Position -> Operation ()
  SwitchPosition       :: PlayerLens -> MonsterSpace ->               Operation ()
  TributeMonster       :: PlayerLens ->                               Operation ()

{% endhighlight %}

Lots of verbs already!  Let's focus on `TributeMonster`, since we will implement
its functionality today.  Its type tells us that it takes as input a
`PlayerLens` (that is, a lens to a given player, the player who must perform a
tribute), and returns `()` (i.e. nothing interesting).  At a high-level, when we
want a player to tribute one monster, we will just call this high-level verb,
and be done.  Separately, we will implement the low-level mechanics of tributing
a monster: ask the user what monster to tribute, remove it from their main
monster zone, and place it in their graveyard.  This will not pay off
immediately, as we only have one location in the code where tributes must happen
for now, but eventually, we might have spell cards or trap cards that require a
tribute, and so the verb will start showing its usefulness.

We pack all those verbs into functions, so as to conceal their nature from
client code (this will let us hide whether some verbs are base verbs or derived
verbs from our client code, see further below for an example of a derived verb):

{% highlight haskell %}
-- ...

tributeMonster ::
  Member Operation e =>
  PlayerLens -> Eff e ()
tributeMonster player = send $ TributeMonster player

-- ...
{% endhighlight %}

and we can give their implementation (in terms of our `GameEffects` effect
system) in a big dispatch function:

{% highlight haskell %}

runOperation ::
  GameEffects e =>
  Operation a -> Eff e a
runOperation operation = case operation of

  -- ...

  TributeMonster player -> do
    playerMainMonsterZone <- getLensed (L.mainMonsterZone player)
    tribute               <- chooseTribute $ monsterSpaces playerMainMonsterZone
    handleOperation $ Operation.destroyMonster player tribute

  -- ...

{% endhighlight %}

Note that, in this implementation, I rely on another verb, `destroyMonster`, to
remove the monster from the main monster zone and put it in the graveyard.  I'm
not sure whether there is a better way to do so than calling `handleOperation`
manually:

{% highlight haskell %}

handleOperation ::
  GameEffects e =>
  Eff '[Operation] a -> Eff e a
handleOperation (Val x) = return x
handleOperation (E u q) = case decomp q of
  Right operation -> do
    result <- runOperation operation
    handleOperation (u ^$ result)
  Left  _ -> error "This can not happen" -- because `Operation` is the only effect

{% endhighlight %}

When our collection of verbs is large enough, we can implement derived verbs as
sequences of base verbs.  For instance, the keen reader might have noticed that
we did not have verbs for attacks and direct attacks.  Here is how we implement
`directAttack` as a derived verb:

{% highlight haskell %}

directAttack ::
  Operations e =>
  PlayerLens -> MonsterSpace -> PlayerLens -> Eff e (Maybe  Victory)
directAttack player monster target = do
  Operation.log =<< DirectAttacked <$> getPlayer player <*^> monster <*> getPlayer target
  setHasAttacked player monster
  let sourceATK = view (monsterCard . Card.attack) monster
  Operation.inflictDamage target sourceATK

{% endhighlight %}

We can now rewrite all phases to only be in terms of the `Operation`
domain-specific language.  For instance, for the main phase, the `validMoves`
become:

{% highlight haskell %}

validMoves ::
  Operations e =>
  Eff e [Move 'Main]
validMoves = do
  currentPlayerHand              <- getHand              L.currentPlayer
  currentPlayerHasNormalSummoned <- getHasNormalSummoned L.currentPlayer
  currentPlayerMainMonsterZone   <- getMainMonsterZone   L.currentPlayer

  let normalSummonMoves =
        if not currentPlayerHasNormalSummoned
           && any S.isEmpty currentPlayerMainMonsterZone
        then [ NormalSummon card position
             | card <- currentPlayerHand
             , view level card <= 4
             , position <- [ Position.Attack, FaceDownDefense ]
             ]
        else []

  let tributeSummonMoves =
        if not currentPlayerHasNormalSummoned
        then [ TributeSummon card position
             | card <- currentPlayerHand
             , let cardLevel = view level card
             , cardLevel > 4
             , length (S.monsterSpaces currentPlayerMainMonsterZone) >= tributeFor cardLevel
             , position <- [ Position.Attack, FaceDownDefense ]
             ]
        else []

  let switchPositionMoves =
        [ SwitchPosition monster
        | monster <- S.monsterSpaces currentPlayerMainMonsterZone
        , not $ view L.hasSwitchedPosition monster
        ]

  return $
    [ Move.EndMainPhase, Move.EndTurn ]
    ++ normalSummonMoves
    ++ tributeSummonMoves
    ++ switchPositionMoves

{% endhighlight %}

Note the addition of `tributeSummonMoves`.  For any card with level strictly
greater than 4, the rules are that it can be summoned in exchange for a tribute.
If the monster's level is 5 or 6, it can be summoned for 1 tribute.  If the
monster's level is 7 or 8, it can be summoned for 2 tributes.  For now I'll
ignore larger levels as we won't introduce them until much later.

The implementation of the main phase will look more disappointing now, as it
mostly defers to the appropriate verbs:

{% highlight haskell %}

mainPhase ::
  Operations e =>
  Eff e (Maybe Victory)
mainPhase = validMoves >>= chooseMove >>= \case

  Move.EndMainPhase -> do
    enterBattlePhase
    return Nothing

  Move.EndTurn -> do
    endTurn
    return Nothing

  Move.NormalSummon card position -> do
    summonMonster L.currentPlayer card position
    return Nothing

  Move.TributeSummon card position -> do
    let cardLevel        = view level card
    let requiredTributes = tributeFor cardLevel
    replicateM_ requiredTributes $ tributeMonster L.currentPlayer
    summonMonster L.currentPlayer card position
    return Nothing

  Move.SwitchPosition monster -> do
    Operation.switchPosition L.currentPlayer monster
    return Nothing

{% endhighlight %}

The interesting bit is `TributeSummon`, where we repeat `tributeMonster` as many
times as is necessary for the level of the monster to be summoned.

Randomized starting hands
-------------------------

As a little extra for today, it would be nice to have players actually pull
their original hand from their shuffled deck.  In order to do so, we will need a
new effect for shuffling a deck.  Unfortunately, this requires doing some `IO`,
as we need a source of randomness.  We add a new `IO` effect to our list of
`GameEffects`:

{% highlight haskell %}

type GameEffects e =
  (
    [ ChooseOption
    , Fresh
    , Reader       Configuration
    , State        Duel
    , Writer       Log
    ] <:: e
  , Lifted IO e
  )

{% endhighlight %}

To do so, we have used the `Lifted` effect transformer, that lifts a monadic
effect into the effect library.  Now, we are faced with a problem, given how I
had originally written the `ChooseOption` effect handlers.  They were all
written with the assumption that they would be the last effect to be handled, as
they were doing `IO`.  But now, we also have an actual `IO` in the set of
effects, that also wants to be the last effect!  We need to change the handlers
for `ChooseOption` so that they piggyback on the `IO` effect rather than handle
it themselves.  We change `handleChooseOptionRandom` from its old type:

{% highlight haskell %}

handleChooseMoveRandom :: ChooseMove a -> IO a

{% endhighlight %}

to the more flexible type (and new implementation):

{% highlight haskell %}

handleChooseOptionRandom ::
  Lifted IO e =>
  ChooseOption option -> Eff e option
handleChooseOptionRandom (ChooseOption _ _ validOptions) = lift $ do
  let len = length validOptions
  when (len == 0) $ throwIO EmptyList
  optionIndex <- randomRIO (0, len - 1)
  let chosenOption = validOptions !! optionIndex
  return chosenOption

{% endhighlight %}

The implementation is mostly the same, except that we inserted the `lift`
operation, turning the old `IO` into an `Eff`!  We can do the same for
`handleChooseOptionIO` (remember, it handled the choose effect by asking the
user to choose, using `IO`, as opposed to randomly picking a choice).  Finally,
we must update the dispatch function (picking between IO-handling and
random-handling), as:

{% highlight haskell %}

handleChooseOption ::
  Lifted IO e =>
  (forall b. ChooseOption b -> Eff e b) -> Eff (ChooseOption ': e) a -> Eff e a
handleChooseOption _           (Val x) = return x
handleChooseOption howToHandle (E u q) = case decomp q of
     Right command -> do
       chosenOption <- howToHandle command
       handleChooseOption howToHandle (u ^$ chosenOption)
     Left u1 -> E (qComps u (handleChooseOption howToHandle)) u1

{% endhighlight %}

Critically, here, we peel off the `ChooseOption` effect even though it is
**not** the last effect!  Handling it will happen in the lifted IO effect, which
will be peeled later (and last).

Finally, let's improve `duel` so that players finally shuffle their decks and
draw cards prior to the duel starting:

{% highlight haskell %}

duel ::
  Operations e =>
  Eff e Victory
duel = do
  shuffleDeck L.currentPlayer
  shuffleDeck L.otherPlayer
  handSize <- getStartingHandSize
  replicateM_ handSize $ drawCard L.currentPlayer
  replicateM_ handSize $ drawCard L.otherPlayer
  endTurn
  untilJust runPhase

{% endhighlight %}

And that's it, we now get more randomized duels!  As for what's next, there are
two things that I'd like to tackle next.  One is to gather card information from
a database, rather than manually entering them.  The other is to finally add
either spells or traps, or both, since they rely on very similar game mechanics.
