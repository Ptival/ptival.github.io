---
layout: post
title: "Creating a card game in Haskell (part 1)"
date: 2018-09-30 01:20:00 -0700
comments: true
categories:
---

[Source code for this post](https://github.com/Ptival/yugioh/tree/9e0dbebb96b6c3adbd97564c11502a2cd8d10974)

Creating a card game in Haskell: an experiment
----------------------------------------------

Hello visitor,

This series of post will be less academic, and more programmer-oriented.  I have
been wanting to write a simulator for a card game (nominally, Yu-Gi-Oh!), and I
figured it'd be fun to describe my way through programming it so that others may
benefit from reading through!

I will try to add features very slowly, while still thinking a little bit ahead
to avoid having to rewrite everything at each iteration.  Let's get started!

Boilerplate
-----------

I will be using `stack`, so we need a `yugioh.cabal` file and a `stack.yaml`.
For now we don't introduce fancy libraries, just `base`.

Creating the boring data structures
-----------------------------------

We will follow the [official
rulebook](https://www.yugioh-card.com/en/rulebook/), and define data types as
they come up.  For now, let's try and define a datatype for monster cards.

Monster cards have a name, an attribute, an attack value (often written ATK), a
defense value (often noted DEF), and a level (often shown as a number of stars,
between 1 and 12), and a Type.  Let's ignore all the many, many complications
that lie ahead, and pretend that this is the whole story.  We will need a
datatype for attributes:

{% highlight haskell %}

data Attribute
  = Dark
  | Divine
  | Earth
  | Fire
  | Light
  | Water
  | Wind
  deriving (Eq, Generic, Show)

{% endhighlight %}

Nothing fancy here, though you might notice that I derived three type classes.
`Eq` is definitely going to be needed at some point, since attributes must be
compared to resolve certain effects or conditions.  `Show` is almost always nice
to have, for quickly printing values.  I tend to add `Generic` to my data types,
so that I can easily do crazy things to them when needed (for instance, deriving
pretty-printers or serializers).

We also define the long list of Types:

{% highlight haskell %}

data Type
  = Aqua
  | Beast
  | BeastWarrior
  | CreatorGod
  | Cyberse
  | Dinosaur
  | DivineBeast
  | Dragon
  | Fairy
  | Fiend
  | Fish
  | Insect
  | Machine
  | Plant
  | Psychic
  | Pyro
  | Reptile
  | Rock
  | SeaSerpent
  | Spellcaster
  | Thunder
  | Warrior
  | WingedBeast
  | Wyrm
  | Zombie
  deriving (Eq, Generic, Show)

{% endhighlight %}

That's enough to let us define the datatype for our cards!

{% highlight haskell %}

data Card = Card
  { _name        :: String
  , _attribute   :: Attribute
  , _level       :: Int
  , _monsterType :: Type
  , _description :: String
  , _attack      :: Int
  , _defense     :: Int
  }
  deriving (Eq, Generic, Show)

makeLenses ''Card

{% endhighlight %}

Here, I use `TemplateHaskell` to derive lenses for the datatype.  Lenses will be
useful because they will give us a succinct, compositional way to update values
nested several datatypes deep.  More on this later.

I also define a `display` function that will be nicer than the `Show` instance
for human consumption.  I like string interpolation, so I use the `interpolate`
package.

{% highlight haskell %}

display :: Card -> String
display (Card {..}) =
  [i|#{_name} [#{_attribute}] (#{_monsterType} Lv.#{_level}) [#{_attack}/#{_defense}]|]

{% endhighlight %}

We are ready to define at least one card, so that we can test everything.  And
what a more iconic card than `Blue Eyes White Dragon`?

{% highlight haskell %}

blueEyesWhiteDragon :: Card
blueEyesWhiteDragon = Card
  { _name        = "Blue Eyes White Dragon"
  , _attribute   = Light
  , _level       = 8
  , _monsterType = Dragon
  , _description = "This legendary dragon is a powerful engine of destruction. Virtually invincible, very few have faced this awesome creature and lived to tell the tale."
  , _attack      = 3000
  , _defense     = 2500
  }

{% endhighlight %}

Eventually, we will not want to define cards manually like this, but for now
this will do.

Let's wrap things up here by testing that we can display a card:

{% highlight haskell %}

main :: IO ()
main = do
  putStrLn $ display blueEyesWhiteDragon

{% endhighlight %}

{% highlight bash %}

$ stack exec yugioh
Blue Eyes White Dragon [Light] (Dragon Lv.8) [3000/2500]

{% endhighlight %}

Great, let's stop here.  In the [next
chapter](https://ptival.github.io/2018/09/30/card-game-02/), we will create the
data structures for our players and their decks.
